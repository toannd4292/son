{% comment %}Namogoo Snippet{% endcomment %}
<script type="text/javascript" async> (() => { const cfgKey = "namogooDataLayer", categoriesCfgKey = "NmgDLProductCategories"; let userData = {}, siteData = {}, productData = {}, cartData = {}, searchProductsData = [], categoryProductsData = [], categoryData = {}; let utils = { objectIsEmpty: (obj) => { if (Array.isArray(obj)) { return obj.length === 0; } return Object.keys(obj).length === 0 && obj.constructor === Object; } }; let page = { href: () => window.location.href, pageType: () => { let pType = "{{ request.page_type }}"; switch (pType) { case '404': case 'password': case 'list-collections': { return 'Other'; } case 'article': case 'blog': case 'page': { return 'Content Page'; } case 'cart': { return 'Cart'; } case 'collection': { return 'Category'; } case 'customers/account': case 'customers/reset_password': { return 'Account'; } case 'customers/activate_account': case 'customers/addresses': case 'customers/login': case 'customers/register': { return 'Customer Service' } case 'customers/order': { return 'Order Details'; } case 'gift_card': { return 'Promotion'; } case 'product': { return 'Product'; } case 'index': { return 'Homepage'; } case 'search': { return 'Search'; } } let href = page.href(); if (href.includes("/cart")) { return 'Cart'; } else if (href.includes("/account")) { return 'Account'; } else if (href.includes("/thank_you")) { return 'Order Confirmation'; } else if (href.includes("/orders/")) { return 'Order Details'; } else if (href.includes("/checkout")) { return 'Checkout'; } else { return 'Other'; } }, requiredDataLayerGroups: () => { let pt = page.pageType(); let groups = ['userData', 'siteData', 'cartData']; if (pt === 'Product'){ groups.push('productData'); } else if (pt === 'Category'){ groups.push('categoryData', 'categoryProductsData'); } else if (pt === 'Search'){ groups.push('searchProductsData'); } return groups; }, td: () => window.ShopifyAnalytics.lib.trekkie.defaultAttributes, meta: () => window.ShopifyAnalytics.meta, get: { user: { uniqToken: () => page.td().uniqToken, visitToken: () => page.td().visitToken, id: () => __st.cid, }, }, set: { userData: () => { userData.guestUserId = page.get.user.uniqToken(); userData.sessionId = page.get.user.visitToken(); let userId = page.get.user.id(); if (userId){ userData.userId = userId; userData.loginType = 'logged in user'; } else { userData.userId = ''; userData.loginType = 'guest user'; } }, siteData: () => { siteData.local = "{{ request.locale.iso_code }}"; siteData.language = document.documentElement.lang; siteData.currency = "{{ shop.currency }}"; siteData.shopCurrency = "{{ shop.currency }}"; let currency = window.Currency ? window.Currency.currentCurrency : ''; siteData.cartCurrency = currency || "{{ cart.currency.iso_code }}"; siteData.pageType = page.pageType(); siteData.timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone; {%- if search and search.performed -%} siteData.searchTerms = "{{ search.terms }}"; {%- endif -%} }, productData: () => { {%- if product -%} let selectedVariantId = page.meta().selectedVariantId || {{ product.selected_or_first_available_variant.id }}; let allVariants = [ {%- for variant in product.variants -%} { sku: {{ variant.sku | json }}, id: {{ variant.id }}, salePrice: {{ variant.price }}, originalPrice: {{ variant.price }}, available: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, }, {%- endfor -%} ]; let selectedVariant = allVariants.filter(v => v.id == selectedVariantId)[0] || {}; productData.sku = selectedVariant.sku || ''; productData.id = {{ product.id }}; productData.variantId = selectedVariant.id; productData.title = "{{ product.title | escape }}"; productData.brand = "{{ product.vendor | escape }}"; productData.salePrice = selectedVariant.salePrice / 100 + ''; productData.originalPrice = selectedVariant.originalPrice / 100 + ''; productData.quantity = selectedVariant.quantity; productData.inStock = selectedVariant.available; productData.imageUrl = "{{ product | img_url }}"; let productCollections = [ {%- if product.collections -%} {%- for collection in product.collections -%} { id: "{{ collection.id }}", handle: "{{ collection.handle }}", title: "{{ collection.title }}" }, {%- endfor -%} {%- elsif collection -%} { id: "{{ collection.id }}", handle: "{{ collection.handle }}", title: "{{ collection.title }}" } {%- endif -%} ]; productData.categoryIds = []; productData.categoryNames = []; productData.categoryHandles = []; productCollections.forEach(collection => { productData.categoryIds.push(collection.id); productData.categoryNames.push(collection.title); productData.categoryHandles.push(collection.handle); }); {%- endif -%} }, cartData: () => { cartData.total = {{ cart.total_price }} / 100 + ''; cartData.subTotal = {{ cart.items_subtotal_price }} / 100 + ''; {% assign discounts = cart.cart_level_discount_applications | default: cart.discount_applications %} {%- for dscnt in discounts -%} cartData.discountData = { id: "{{ dscnt.key }}", name: "{{ dscnt.title | escape }}", discountType: "{{ dscnt.type }}", totalAmount: {{ dscnt.total_allocated_amount }} / 100 + '', value: "{{ dscnt.value }}", valueType: "{{ dscnt.value_type }}", }; {% break %} {%- endfor -%} {%- if cart.item_count -%} cartData.items = [ {%- for item in cart.items -%} { sku: "{{ item.sku }}", id: {{ item.product_id }}, variantId: {{ item.id }}, title: "{{ item.title | ecsape }}", brand: "{{ item.vendor | escape}}", price: {{ item.price }} / 100 + '', originalPrice: {{ item.price }} / 100 + '', salePrice: {{ item.discounted_price }} / 100 + '', quantity: {{ item.quantity }}, imageUrl: "{{ item | img_url }}", inStock: true, {%- if item.product.collections -%} {%- assign categoryIds = '' -%} {%- assign categoryNames = '' -%} {%- assign categoryHandles = '' -%} {%- for collection in item.product.collections -%} {%- assign categoryIds = categoryIds | append: collection.id | append: ' ,|!|, ' -%} {%- assign categoryNames = categoryNames | append: collection.title | escape | append: ' ,|!|, ' -%} {%- assign categoryHandles = categoryHandles | append: collection.handle | append: ' ,|!|, ' -%} {%- endfor -%} categoryIds: {{ categoryIds | split: ' ,|!|, ' | json }}, categoryNames: {{ categoryNames | split: ' ,|!|, ' | json }}, categoryHandles: {{ categoryHandles | split: ' ,|!|, ' | json }}, {%- else -%} categoryIds: [], categoryNames: [], categoryHandles: [], {%- endif -%} {% if item.discounts.size > 0 %} discountData: { amount: {{ item.discounts[0].amount | default: 0 }} / 100 + '', title: {{ item.discounts[0].title | json }}, }, {% endif %} }, {%- endfor -%} ]; let productCategoriesData = {}; cartData.items.forEach(item => { productCategoriesData[item.variantId] = { categoryIds: item.categoryIds, categoryNames: item.categoryNames, categoryHandles: item.categoryHandles, } }); localStorage.setItem(categoriesCfgKey, JSON.stringify(productCategoriesData)); {%- endif -%} cartData.totalQuantity = {{ cart.item_count }}; }, categoryData: () => { {%- if request.page_type == 'collection' -%} {%- assign collection = collections[handle] -%} categoryData.id = "{{ collection.id }}"; categoryData.handle = "{{ collection.handle }}"; categoryData.title = "{{ collection.title }}"; {%- endif -%} }, categoryProductsData: () => { categoryProductsData.length = 0; {%- if request.page_type == 'collection' -%} {%- assign collection = collections[handle] -%} {%- if collection.products -%} let product = {}, firstVariant = {}, variants = [], productCollections = []; {%- for product in collection.products -%} productCollections = [ {%- if product.collections -%} {%- for collection in product.collections -%} { id: "{{ collection.id }}", handle: "{{ collection.handle }}", title: "{{ collection.title }}" }, {%- endfor -%} {%- endif -%} ]; product = { id: {{ product.id }}, title: `{{ product.title }}`, brand: `{{ product.vendor }}`, imageUrl: "{{ product | img_url }}", categoryIds: productCollections ? productCollections.map(collection => collection.id) : [], categoryNames: productCollections ? productCollections.map(collection => collection.title) : [], categoryHandles: productCollections ? productCollections.map(collection => collection.handle) : [], {%- if product.variants.size == 1 -%} {% assign variant = product.variants[0] %} sku: {{ variant.sku | json }}, variantId: {{ variant.id }}, salePrice: {{ variant.price }} / 100 + '', originalPrice: {{ variant.price }} / 100 + '', inStock: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, variants: [], }; {%- else -%} }; firstVariant = { {%- assign variant = product.selected_or_first_available_variant -%} sku: {{ variant.sku | json }}, variantId: {{ variant.id }}, salePrice: {{ variant.price }} / 100 + '', originalPrice: {{ variant.price }} / 100 + '', inStock: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, }; variants = [ {%- for variant in product.variants -%} {%- if variant.id == product.selected_or_first_available_variant.id -%} {%- continue -%} {%- endif -%} { sku: {{ variant.sku | json }}, variantId: {{ variant.id }}, salePrice: {{ variant.price }} / 100 + '', originalPrice: {{ variant.price }} / 100 + '', inStock: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, }, {%- endfor -%} ]; product.variants = variants.map(v => {return {...product, ...v}}); product = {...product, ...firstVariant}; {%- endif -%} categoryProductsData.push({...product}); {%- endfor -%} {%- else -%} categoryProductsData.push({}); {%- endif -%} {%- endif -%} }, searchProductsData: () => { searchProductsData.length = 0; {%- if request.page_type == 'search' -%} {%- if search and search.performed -%} let searchResult = {}, searchResultFirstVariant = {}, searchResultVariants = [], searchResultCollections = []; {%- for product in search.results -%} {%- if product.object_type != "product" -%} {%- continue -%} {%- endif -%} searchResultCollections = [ {%- if product.collections -%} {%- for collection in product.collections -%} { id: "{{ collection.id }}", handle: "{{ collection.handle }}", title: "{{ collection.title }}" }, {%- endfor -%} {%- endif -%} ]; searchResult = { id: {{ product.id }}, title: `{{ product.title }}`, brand: `{{ product.vendor }}`, imageUrl: "{{ product | img_url }}", categoryIds: searchResultCollections ? searchResultCollections.map(collection => collection.id) : [], categoryNames: searchResultCollections ? searchResultCollections.map(collection => collection.title) : [], categoryHandles: searchResultCollections ? searchResultCollections.map(collection => collection.handle) : [], {%- if product.variants.size == 1 -%} {% assign variant = product.variants[0] %} sku: {{ variant.sku | json }}, variantId: {{ variant.id }}, salePrice: {{ variant.price }} / 100 + '', originalPrice: {{ variant.price }} / 100 + '', inStock: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, variants: [], }; {%- else -%} }; searchResultFirstVariant = { {%- assign variant = product.selected_or_first_available_variant -%} sku: {{ variant.sku | json }}, variantId: {{ variant.id }}, salePrice: {{ variant.price }} / 100 + '', originalPrice: {{ variant.price }} / 100 + '', inStock: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, }; searchResultVariants = [ {%- for variant in product.variants -%} {%- if variant.id == product.selected_or_first_available_variant.id -%} {%- continue -%} {%- endif -%} { sku: {{ variant.sku | json }}, variantId: {{ variant.id }}, salePrice: {{ variant.price }} / 100 + '', originalPrice: {{ variant.price }} / 100 + '', inStock: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, }, {%- endfor -%} ]; searchResult.variants = searchResultVariants.map(v => {return {...searchResult, ...v}}); searchResult = {...searchResult, ...searchResultFirstVariant}; {%- endif -%} searchProductsData.push({...searchResult}); {%- else -%} searchProductsData.push({}); {%- endfor -%} {%- endif -%} {%- endif -%} }, } }; let setRequiredGroupsData = () => { let requiredDataLayerGroups = page.requiredDataLayerGroups(); requiredDataLayerGroups.forEach((item, index) => { if (utils.objectIsEmpty(eval(item))){ try { page.set[item]() } catch (e) { } } }); }; let setLog = (groupsList) => { let log = {}; groupsList.forEach((item, index) => { if (['userData', 'siteData', 'cartData', 'categoryData'].includes(item)){ log[item] = eval(item) } else if (['categoryProductsData', 'searchProductsData'].includes(item)){ log['items'] = eval(item) } else if (item === 'productData'){ log['items'] = [eval(item)] } }); window[cfgKey] = [log] }; let interval; let perform = (i=1000) => { interval = setInterval(() => { setRequiredGroupsData(); let c = 0; let requiredGroups = page.requiredDataLayerGroups(); requiredGroups.forEach((item, index) => { if (!utils.objectIsEmpty(eval(item))){ c++ } }); if (requiredGroups.length === c){ clearInterval(interval); setLog(requiredGroups) } }, i) }; perform(); let initialHref = window.location.href; let trackUrl = setInterval(() => { if (page.href() !== initialHref){ initialHref = page.href(); userData = {}; siteData = {}; productData = {}; cartData = {} ; searchProductsData = []; categoryProductsData = []; categoryData = {}; perform() } }, 1000) })();
</script>
{% comment %}END of Namogoo Snippet{% endcomment %}
{%- liquid
  assign main_menu = linklists[section.settings.main_menu_link_list]
  assign toolbar_menu = linklists[section.settings.toolbar_menu]

  assign logo_alignment = 'left'
  if section.settings.main_menu_alignment == 'center-left' or section.settings.main_menu_alignment == 'center-split' or section.settings.main_menu_alignment == 'center' or section.settings.main_menu_alignment == 'center-drawer'
    assign logo_alignment = 'center'
  endif

  assign dropdown_alignment = 'left'
  if section.settings.main_menu_alignment == 'left-center' or section.settings.main_menu_alignment == 'center-split' or section.settings.main_menu_alignment == 'center'
    assign dropdown_alignment = 'center'
  endif

  assign template_name = template | replace: '.', ' ' | truncatewords: 2, '' | handle

  assign sticky_header = false
  if section.settings.header_style == 'sticky'
    assign sticky_header = true
  endif
  assign overlay_header = false
  if template_name == 'index' and section.settings.sticky_index
    assign overlay_header = true
  endif
  if template_name contains 'collection' and collection.image and section.settings.sticky_collection
    assign overlay_header = true
  endif
-%}

{%- render 'drawer-menu',
  section: section,
  main_menu: main_menu,
  toolbar_menu: toolbar_menu,
  logo_alignment: logo_alignment
-%}
{%- render 'cart-drawer' -%}

<style>
{% for block in section.blocks %}  
  {% case block.type %}
    {% when 'color' %}  
    .nav_text_{{block.settings.text | handle }}, .nav_text_{{block.settings.text | handle }}>a, .nav_text_{{block.settings.text | handle }} .mobile-nav__link {
      color: {{block.settings.color}} !important;
    }
  {% endcase %} 
{% endfor %}


    
  .site-nav__link,
  .site-nav__dropdown-link:not(.site-nav__dropdown-link--top-level) {
    font-size: {{ settings.type_navigation_size }}px;
  }
  {% if settings.type_navigation_capitalize %}
    .site-nav__link, .mobile-nav__link--top-level {
      text-transform: uppercase;
      letter-spacing: 0.2em;
    }
    .mobile-nav__link--top-level {
      font-size: 1.1em;
    }
  {% endif %}

  {% if mainmenu.length > 6 %}
    .site-nav__link {
      padding-left: 10px;
      padding-right: 10px;
    }
  {% endif %}

  {% unless section.settings.mega_menu_images %}
    .megamenu__colection-image {
      display: none;
    }
  {% endunless %}

  {%- if settings.color_header == settings.color_body_bg or settings.color_body_bg contains settings.color_header -%}
    .site-header {
      box-shadow: 0 0 1px rgba(0,0,0,0.2);
    }

    .toolbar + .header-sticky-wrapper .site-header {
      border-top: 0;
    }
  {%- endif -%}

  {%- if settings.color_announcement == settings.color_body_bg -%}
    .announcement-bar {
      border-bottom: 1px solid;
    }
  {%- endif -%}
</style>

<div data-section-id="{{ section.id }}" data-section-type="header">
  {%- if overlay_header or section.settings.announcement_above_header -%}
    {%- render 'announcement-bar', section: section -%}
  {%- endif -%}

  {%- unless overlay_header -%}
    {%- if section.settings.show_locale_selector or section.settings.show_currency_selector or section.settings.toolbar_social or section.settings.toolbar_menu != blank -%}
      {%- render 'toolbar',
        section: section,
        toolbar_menu: toolbar_menu,
        overlay_header: overlay_header
      -%}
    {%- endif -%}
  {%- endunless -%}

  <div class="header-sticky-wrapper">
    <div id="HeaderWrapper" class="header-wrapper{% if overlay_header %} header-wrapper--sticky is-light{% endif %}">

      {%- if overlay_header -%}
        {%- if section.settings.show_locale_selector or section.settings.show_currency_selector or section.settings.toolbar_social or section.settings.toolbar_menu != blank -%}
          {%- render 'toolbar',
            section: section,
            toolbar_menu: toolbar_menu,
            overlay_header: overlay_header
          -%}
        {%- endif -%}
      {%- endif -%}
      <header
        id="SiteHeader"
        class="site-header{% if settings.type_navigation_style == 'heading' %} site-header--heading-style{% endif %}"
        data-sticky="{{ sticky_header }}"
        data-overlay="{{ overlay_header }}">
        <div class="page-width">
          <div
            class="header-layout header-layout--{{ section.settings.main_menu_alignment }}"
            data-logo-align="{{ logo_alignment }}">

            {%- if logo_alignment == 'left' -%}
              <div class="header-item header-item--logo">
                {%- render 'header-logo-block', section: section -%}
              </div>
            {%- endif -%}

            {%- if logo_alignment == 'left' and section.settings.main_menu_alignment != 'left-drawer' -%}
              <div class="header-item header-item--navigation{% if section.settings.main_menu_alignment == 'left-center' %} text-center{% endif %}">
                {%- render 'header-desktop-nav', main_menu: main_menu, dropdown_alignment: dropdown_alignment -%}
              </div>
            {%- endif -%}

            {%- if logo_alignment == 'center' -%}
              <div class="header-item header-item--left header-item--navigation">
                {%- if section.settings.main_menu_alignment == 'center' or section.settings.main_menu_alignment == 'center-split' -%}
                  {%- if settings.search_enable -%}
                    <div class="site-nav small--hide">
                      <a href="{{ routes.search_url }}" class="site-nav__link site-nav__link--icon js-search-header">
                        <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-search" viewBox="0 0 64 64"><path d="M47.16 28.58A18.58 18.58 0 1 1 28.58 10a18.58 18.58 0 0 1 18.58 18.58zM54 54L41.94 42"/></svg>
                        <span class="icon__fallback-text">{{ 'general.search.title' | t }}</span>
                      </a>
                    </div>
                  {%- endif -%}
                {%- endif -%}

                {%- if section.settings.main_menu_alignment == 'center-left' -%}
                  {%- render 'header-desktop-nav', main_menu: main_menu, dropdown_alignment: dropdown_alignment -%}
                {%- endif -%}

                <div class="site-nav{% unless section.settings.main_menu_alignment == 'center-drawer' %} medium-up--hide{% endunless %}">
                  <button
                    type="button"
                    class="site-nav__link site-nav__link--icon js-drawer-open-nav"
                    aria-controls="NavDrawer">
                    <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-hamburger" viewBox="0 0 64 64"><path d="M7 15h51M7 32h43M7 49h51"/></svg>
                    <span class="icon__fallback-text">{{ 'general.drawers.navigation' | t }}</span>
                  </button>
                </div>
              </div>

              {%- if section.settings.main_menu_alignment == 'center-split' -%}
                {%- render 'header-split-nav', main_menu: main_menu, section: section, dropdown_alignment: dropdown_alignment -%}
              {%- endif -%}

              {%- if section.settings.main_menu_alignment != 'center-split' -%}
                <div class="header-item header-item--logo">
                  {%- render 'header-logo-block', section: section -%}
                </div>
              {%- endif -%}
            {%- endif -%}

            <div class="header-item header-item--icons">
              {%- render 'header-icons', section: section -%}
            </div>
          </div>

          {%- if section.settings.main_menu_alignment == 'center' -%}
            <div class="text-center">
              {%- render 'header-desktop-nav', main_menu: main_menu, dropdown_alignment: dropdown_alignment -%}
            </div>
          {%- endif -%}
        </div>
        <div class="site-header__search-container">
          <div class="site-header__search">
            <div class="page-width">
              <form action="{{ routes.search_url }}" method="get" role="search"
                id="HeaderSearchForm"
                class="site-header__search-form">
                <input type="hidden" name="type" value="{{ settings.search_type }}">
                <input type="hidden" name="options[prefix]" value="last">
                <button type="submit" class="text-link site-header__search-btn site-header__search-btn--submit">
                  <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-search" viewBox="0 0 64 64"><path d="M47.16 28.58A18.58 18.58 0 1 1 28.58 10a18.58 18.58 0 0 1 18.58 18.58zM54 54L41.94 42"/></svg>
                  <span class="icon__fallback-text">{{ 'general.search.submit' | t }}</span>
                </button>
                <input type="search" name="q" value="{{ search.terms | escape | replace: '*', '' }}" placeholder="{{ 'general.search.placeholder' | t }}" class="site-header__search-input" aria-label="{{ 'general.search.placeholder' | t }}">
              </form>
              <button type="button" id="SearchClose" class="js-search-header-close text-link site-header__search-btn">
                <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-close" viewBox="0 0 64 64"><path d="M19 17.61l27.12 27.13m0-27.12L19 44.74"/></svg>
                <span class="icon__fallback-text">{{ 'general.accessibility.close_modal' | t | json }}</span>
              </button>
            </div>
          </div>
          {%- if settings.predictive_search_enabled -%}
            <div id="PredictiveWrapper" class="predictive-results hide" data-image-size="{{ settings.predictive_image_size }}">
              <div class="page-width">
                <div id="PredictiveResults" class="predictive-result__layout"></div>
                <div class="text-center predictive-results__footer">
                  <button type="button" class="btn btn--small" data-predictive-search-button>
                    <small>
                      {{ 'general.search.view_more' | t }}
                    </small>
                  </button>
                </div>
              </div>
            </div>
          {%- endif -%}
        </div>
      </header>
    </div>
  </div>

  {%- unless overlay_header or section.settings.announcement_above_header -%}
    {%- render 'announcement-bar', section: section -%}
  {%- endunless -%}
</div>

{% schema %}
{
  "name": "t:sections.header.name",
  "settings": [
    {
      "type": "link_list",
      "id": "main_menu_link_list",
      "label": "t:sections.header.settings.main_menu_link_list.label",
      "default": "main-menu"
    },
    {
      "type": "checkbox",
      "id": "mega_menu_images",
      "label": "t:sections.header.settings.mega_menu_images.label",
      "default": true,
      "info": "t:sections.header.settings.mega_menu_images.info"
    },
    {
      "type": "select",
      "id": "main_menu_alignment",
      "label": "t:sections.header.settings.main_menu_alignment.label",
      "default": "left",
      "options": [
        {
          "value": "left",
          "label": "t:sections.header.settings.main_menu_alignment.options.left.label"
        },
        {
          "value": "left-center",
          "label": "t:sections.header.settings.main_menu_alignment.options.left-center.label"
        },
        {
          "value": "left-drawer",
          "label": "t:sections.header.settings.main_menu_alignment.options.left-drawer.label"
        },
        {
          "value": "center-left",
          "label": "t:sections.header.settings.main_menu_alignment.options.center-left.label"
        },
        {
          "value": "center-split",
          "label": "t:sections.header.settings.main_menu_alignment.options.center-split.label"
        },
        {
          "value": "center",
          "label": "t:sections.header.settings.main_menu_alignment.options.center.label"
        },
        {
          "value": "center-drawer",
          "label": "t:sections.header.settings.main_menu_alignment.options.center-drawer.label"
        }
      ]
    },
    {
      "type": "select",
      "id": "header_style",
      "label": "t:sections.header.settings.header_style.label",
      "default": "normal",
      "options": [
        {
          "value": "normal",
          "label": "t:sections.header.settings.header_style.options.normal.label"
        },
        {
          "value": "sticky",
          "label": "t:sections.header.settings.header_style.options.sticky.label"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "sticky_index",
      "label": "t:sections.header.settings.sticky_index.label",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "sticky_collection",
      "label": "t:sections.header.settings.sticky_collection.label",
      "info": "t:sections.header.settings.sticky_collection.info",
      "default": false
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header_announcement_bar"
    },
    {
      "type": "checkbox",
      "id": "announcement_compact",
      "label": "t:sections.header.settings.announcement_compact.label"
    },
    {
      "type": "checkbox",
      "id": "announcement_above_header",
      "label": "t:sections.header.settings.announcement_above_header.label"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header_toolbar"
    },
    {
      "type": "link_list",
      "id": "toolbar_menu",
      "label": "t:sections.header.settings.toolbar_menu.label",
      "info": "t:sections.header.settings.toolbar_menu.info"
    },
    {
      "type": "checkbox",
      "id": "toolbar_social",
      "label": "t:sections.header.settings.toolbar_social.label"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header_language_selector",
      "info": "t:sections.header.settings.header_language_selector"
    },
    {
      "type": "checkbox",
      "id": "show_locale_selector",
      "label": "t:sections.header.settings.show_locale_selector.label",
      "default": true
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header_currency_selector",
      "info": "t:sections.header.settings.header_currency_selector"
    },
    {
      "type": "checkbox",
      "id": "show_currency_selector",
      "label": "t:sections.header.settings.show_currency_selector.label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_currency_flags",
      "label": "t:sections.header.settings.show_currency_flags.label",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "logo",
      "name": "t:sections.header.blocks.logo.name",
      "limit": 1,
      "settings": [
        {
          "type": "image_picker",
          "id": "logo",
          "label": "t:sections.header.blocks.logo.settings.logo.label"
        },
        {
          "type": "image_picker",
          "id": "logo-inverted",
          "label": "t:sections.header.blocks.logo.settings.logo-inverted.label",
          "info": "t:sections.header.blocks.logo.settings.logo-inverted.info"
        },
        {
          "type": "range",
          "id": "desktop_logo_width",
          "label": "t:sections.header.blocks.logo.settings.desktop_logo_width.label",
          "default": 200,
          "min": 100,
          "max": 400,
          "step": 10,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "mobile_logo_width",
          "label": "t:sections.header.blocks.logo.settings.mobile_logo_width.label",
          "default": 140,
          "min": 60,
          "max": 200,
          "step": 10,
          "unit": "px",
          "info": "t:sections.header.blocks.logo.settings.mobile_logo_width.info"
        }
      ]
    },
    {
      "type": "announcement",
      "name": "t:sections.header.blocks.announcement.name",
      "limit": 3,
      "settings": [
        {
          "type": "text",
          "id": "text",
          "label": "t:sections.header.blocks.announcement.settings.text.label",
          "default": "Hassle-free returns"
        },
        {
          "type": "richtext",
          "id": "link_text",
          "label": "t:sections.header.blocks.announcement.settings.link_text.label",
          "default": "<p>30-day postage paid returns</p>"
        },
        {
          "type": "color",
          "id": "text_color",
          "label": "Text color"
        }
      ]
    },
    {
      "type": "color",
      "name": "Color",
      "settings": [
        {
          "type": "text",
          "id": "text",
          "label": "Name item menu"
        },
        {
          "type": "color",
          "id": "color",
          "label": "Text color"
        },
        {
          "type": "checkbox",
          "id": "sparkling_effect",
          "label": "Sparkling effect"
        }
      ]
    }
  ],
  "default": {
    "settings": {}
  }
}
{% endschema %}
